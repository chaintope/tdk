on: [push, pull_request]

name: CI

jobs:
  build-test:
    name: Build and test
    runs-on: ubuntu-latest
    env: 
      NETWORK_ID: 1905960821 
      PRIVATE_KEY: cUJN5RVzYWFoeY8rUztd47jzXCu1p57Ay8V7pqCzsBD3PEXN7Dd4
      GENESIS_BLOCK: 0100000000000000000000000000000000000000000000000000000000000000000000002b5331139c6bc8646bb4e5737c51378133f70b9712b75548cb3c05f9188670e7440d295e7300c5640730c4634402a3e66fb5d921f76b48d8972a484cc0361e66ef74f45e012103af80b90d25145da28c583359beb47b21796b2fe1a23c1511e443e7a64dfdb27d40e05f064662d6b9acf65ae416379d82e11a9b78cdeb3a316d1057cd2780e3727f70a61f901d10acbe349cd11e04aa6b4351e782c44670aefbe138e99a5ce75ace01010000000100000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100f2052a010000001976a91445d405b9ed450fec89044f9b7a99a4ef6fe2cd3f88ac00000000
    strategy:
      matrix:
        rust:
          - version: stable
            clippy: true
          - version: 1.67.0 # MSRV
        features:
          - --no-default-features --features tapyrus/no-std,miniscript/no-std,hashbrown,blocking,async
          - --all-features --features miniscript/std
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.rust.version }}
            override: true
            profile: minimal
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.1
      - name: Pin dependencies for MSRV
        if: matrix.rust.version == '1.67.0'
        run: |
          cargo update -p zstd-sys --precise "2.0.8+zstd.1.5.5"
          cargo update -p time --precise "0.3.20"
          cargo update -p home --precise "0.5.5"
          cargo update -p proptest --precise "1.2.0"
          cargo update -p url --precise "2.5.0"
          cargo update -p tokio --precise "1.38.0"
      - name: Build
        working-directory: ./crates/chain
        run: cargo build -p "tdk_*" ${{ matrix.features }}
      - name: Test
        working-directory: ./crates/chain
        run: cargo test -p "tdk_*" ${{ matrix.features }}

  check-no-std:
    name: Check no_std
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          # target: "thumbv6m-none-eabi"
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.1
      - name: Check bdk_chain
        working-directory: ./crates/chain
        # TODO "--target thumbv6m-none-eabi" should work but currently does not
        run: cargo check --no-default-features --features tapyrus/no-std,miniscript/no-std,hashbrown
      - name: "[Pending]Check bdk wallet"
        working-directory: ./crates/wallet
        # TODO "--target thumbv6m-none-eabi" should work but currently does not
        run: echo "Pending"
#        run: cargo check --no-default-features --features tapyrus/no-std,miniscript/no-std,bdk_chain/hashbrown
      - name: "Check esplora"
        working-directory: ./crates/esplora
        # TODO "--target thumbv6m-none-eabi" should work but currently does not
        run: cargo check --no-default-features --features tapyrus/no-std,miniscript/no-std,tdk_chain/hashbrown,blocking,async

  check-wasm:
    name: Check WASM
    runs-on: ubuntu-20.04
    env:
      CC: clang-10
      CFLAGS: -I/usr/include
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Install a recent version of clang that supports wasm32
      - run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - || exit 1
      - run: sudo apt-get update || exit 1
      - run: sudo apt-get install -y libclang-common-10-dev clang-10 libc6-dev-i386 || exit 1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            profile: minimal
            target: "wasm32-unknown-unknown"
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.1
      - name: "[Pending]Check bdk wallet"
        working-directory: ./crates/wallet
        run: echo "Pending"
#        run: cargo check --target wasm32-unknown-unknown --no-default-features --features tapyrus/no-std,miniscript/no-std,bdk_chain/hashbrown,dev-getrandom-wasm
      - name: "Check esplora"
        working-directory: ./crates/esplora
        run: cargo check --target wasm32-unknown-unknown --no-default-features --features tapyrus/no-std,miniscript/no-std,tdk_chain/hashbrown,blocking,async

  fmt:
    name: Rust fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            profile: minimal
            components: rustfmt
      - name: Check fmt
        run: cargo fmt --all -- --config format_code_in_doc_comments=true --check

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: 1.78.0
            components: clippy
            override: true
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.1
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path crates/chain/Cargo.toml --all-features --all-targets -- -D warnings
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path crates/persist/Cargo.toml --all-features --all-targets -- -D warnings
#      - uses: actions-rs/clippy-check@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          args: --all-features --all-targets -- -D warnings
      - name: "[Pending]Clippy"
        run: echo "Pending other crates"